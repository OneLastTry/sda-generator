Include %occInclude

Class XF.Installer
{

Parameter NAMESPACE As STRING = "XF";

XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest>
    <Log Text="UnExpire Passwords..." Level="0"/>
	<Invoke Class="XF.Installer" Method="UnExpireUserPasswords" CheckStatus="true">
	</Invoke>
    <Log Text="Creating ${NAMESPACE} namespace and DB..." Level="0"/>
    <Default Name="RESOURCE" Value="%DB_${NAMESPACE}" />
    <Namespace Name="${NAMESPACE}" Code="${NAMESPACE}" Data="${NAMESPACE}" Create="yes" Ensemble="0">
        <Configuration>
            <Database Name="${NAMESPACE}" Dir="${MGRDIR}${DBNAME}" Create="yes" MountAtStartup="true"/>
        </Configuration>
        <Log Text="Enable interoperability to ${NAMESPACE}..." Level="0"/>
	    <Invoke Class="%Library.EnsembleMgr" Method="EnableNamespace" CheckStatus="true">
            <Arg name="pTargetNS" Value="${NAMESPACE}"/>
            <Arg name="pVerbose" Value="1"/>
	    </Invoke>
        <IfDef Var="SOURCE">
            <Log Text="SOURCE defined - offline install from ${SOURCE}" Level="0"/>
            <Import File="${SOURCE}" Recurse="true"/>
        </IfDef> 
        <Log Text="Prepare Foundation..." Level="0"/>
        <Invoke Class="XF.Installer" Method="PrepareFoundation" CheckStatus="true">
        </Invoke>
        <Log Text="Configure auto-start production for ${PRODUCTION}..." Level="0"/>
        <Invoke Class="XF.Installer" Method="SetupProduction" CheckStatus="true">
            <Arg name="production" Value="${PRODUCTION}"/>
        </Invoke>
    </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod Installer(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    return ##class(%Installer.Manifest).%Generate(%compiledclass,%code,"Install")
}

ClassMethod UnExpireUserPasswords() As %Status
{
    set sc = $$$OK
    try {
        new $namespace
        set $namespace = "%SYS"
        do ##class(Security.Users).UnExpireUserPasswords("*")
    } catch (err) {
        set sc = $$$ADDSC(sc,err.AsStatus())
    }
    return sc
}

ClassMethod Install(path As %String) As %Status
{
    set sc = $$$OK
    try {
        set args("NAMESPACE") = ..#NAMESPACE
        set args("DBNAME") = $zconvert(..#NAMESPACE,"L")
        set args("SOURCE") = path
        set args("PRODUCTION") = "XFPKG.FoundationProduction"
        
        #; install manifest
        set sc = $$$ADDSC(sc,..Installer(.args))
    } catch (err) {
        set sc = $$$ADDSC(sc,err.AsStatus())
    }
    return sc
}

ClassMethod SetupProduction(production As %String) As %Status
{
    set sc = $$$OK
    try {
        #; setup and start production
        new $namespace
        set $namespace = ..#NAMESPACE
        set sc = $$$ADDSC(sc,##class(Ens.Director).SetAutoStart(production,1))
        set sc = $$$ADDSC(sc,##class(Ens.Director).StartProduction(production))
    } catch (err) {
        set sc = $$$ADDSC(sc,err.AsStatus())
    }
    return sc
}

ClassMethod PrepareFoundation() As %Status
{
    set sc = $$$OK
    try {
        //Install a Foundation
        do ##class(HS.HC.Util.Installer).InstallFoundation("XF")
    } catch (err) {
        set sc = $$$ADDSC(sc,err.AsStatus())
    }
    return sc
}

}
